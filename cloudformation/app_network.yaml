AWSTemplateFormatVersion: 2010-09-09
Description: >
  Ugochi Jones / Capstone
  This cloud formation template deploys a VPC, with a pair of public and private subnets
  spread across two Availability Zones.  It deploys an Internet Gateway, with a default
  route on the public subnets.  It deploys a pair of NAT Gateways (one in each AZ), and 
  default routes for them in the private subnets.

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
  
  VpcCIDR:
    Description: > 
      The IP range (CIDR notation) for this VPC.  So every IP address in this VPC
      will start with the first 16 bits with 10.0.
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Description: >
      Defines the IP ranges that exist in this public subnet (public subnet1). Every IP address in this subnet will
      start with 10.0.0. This public subnet will be in the first Availability Zone.
    Type: String
    Default: 10.0.0.0/24

  PrivateSubnet1CIDR:
    Description: >
      Defines the IP ranges that exist in this private subnet (private subnet1). Every IP address 
      in this subnet will start with 10.0.2. This public subnet will be in the first Availability Zone.
    Type: String
    Default: 10.0.2.0/24

Resources:
  # defining our Virtual Private cloud
  # Using the parameters to define the CIDR range in our VPC
  VPC: # Name of VPC is VCP
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Vpc
        - Key: Project
          Value: Udacity Project 2 - Udagram
        - Key: Author
          Value: Ugochi Jones

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      # Selected the first element in GetAZs list.
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      # Selected the first element in GetAZs list.
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

# Add internet access
  # Setting up an internet gateway so our VPC can have internet access
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName 

  # InternetGatewayAttachment, attaches a gateway to a particular VPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

# Set up Routers and NAT Gateways
# Adding elastic ip's for out NATGateways
# NAT gateways only let outbound traffic (traffic initiated from your private subnets)
# Elastic IP's are public IP addresses that never change
# We need two NATGateways because the the subnets are in different availability zones
  NatGateway1EIP:
    Type: AWS::EC2::EIP #Elastic IP 1
    # DependsOn says don't create until the resource (e.g., InternetGatewayAttachment) is created
    # However, AWS just takes this as a hint about what should be created first.
    # But what if you have multiple dependencies?
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    DependsOn: NatGateway1EIP
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      # The Reference here is NOT referencing a parameter
      # Instead it is referencing the name of the resource that has been created
      # in this file.  So there is a resource named VPC
      # So !REF can reference a parameter or resource
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociations:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

# The purpose of the output section is to create variables connected to the resources
# you created in this cloudformation script.  Then other cloudformation scripts can
# refer to these variables to interact within their scripts.
# This allows you to compartmentalize scripts (Networking, Storage, Servers)
# Outputs are totally OPTIONAL.  But they are helpful if you want to 1) import into
# another stack, 2) return in a response, 3) view in the AWS console.
# These are GLOBAL VARIABLES!!!!  So they need to be unique throughout the account.

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
    Export:
      # EnvironmentName is a parameter we defined.
      Name: !Sub ${EnvironmentName}-VPCID

  # TO DO: Not sure if this is going to work
  VpcCIDR:
    Description: A reference to the Cidr range for ${EnvironmentName}-VPCID
    Value: !Ref VpcCIDR
    Export:
      # EnvironmentName is a parameter we defined.
      Name: !Sub ${EnvironmentName}-VpcCIDR

  VPCPublicRouteTable:
        Description: Public Routing
        Value: !Ref PublicRouteTable
        Export:
          # Sub Returns the PublicRouteTable ID concatenated with `-PUB-RT`
          Name: !Sub ${EnvironmentName}-PUB-RT

  VPCPrivateRouteTable1:
        Description: Private Routing AZ1
        Value: !Ref PrivateRouteTable1
        Export:
          Name: !Sub ${EnvironmentName}-PRI1-RT

  PublicSubnets:
      Description: A list of the public subnets, deliminated by a comma.
      Value: !Join [ ",", [ !Ref PublicSubnet1]]
      Export:
        Name: !Sub ${EnvironmentName}-PUB-NETS

  PrivateSubnets:
      Description: A list of the private subnets
      Value: !Join [ ",", [ !Ref PrivateSubnet1 ]]
      Export:
        Name: !Sub ${EnvironmentName}-PRIV-NETS

  PublicSubnet1:
      Description: A reference to the public subnet in the 1st Availability Zone
      Value: !Ref PublicSubnet1
      Export:
        Name: !Sub ${EnvironmentName}-PUB1-SN

  PrivateSubnet1:
      Description: A reference to the private subnet in the 1st Availability Zone
      Value: !Ref PrivateSubnet1
      Export:
        Name: !Sub ${EnvironmentName}-PRI1-SN