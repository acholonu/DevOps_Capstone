version: 2.1

# Think of orbs as libraries or packages for CircleCI
orbs:
  slack: circleci/slack@4.4.4
  aws-cli: circleci/aws-cli@2.0.3
  aws-eks: circleci/aws-eks@0.2.3
  kubernetes: circleci/kubernetes@0.4.0

# These are custom functions that I use in other jobs
commands:
  # Function 1
  notify_slack_error:
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1 # build in formating template to display failure
          mentions: "@ugochi" #if you want to target a particular person
          channel: alerts # Slack channel to display to

  # Function 2
  destroy-docker-image:
    description: Destroy docker image
    parameters:
      # Add parameter here
      docker_image_tag:
        type: string
        default: latest
      docker_container_name:
        type: string
        default: NONE
    steps:
      - checkout
      - run:
          name: Destroy docker image
          when: on_fail
          command: |
            # Your code here
            ./docker/cleanup_docker_image.sh <<parameter.docker_image_tag>> <<parameter.docker_container_name>>


  # Function 3
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            # Use for roll back
            # Delete any infrastructure created.

            aws cloudformation delete-stack --stack-name "dagster-network-stack-<<parameters.workflow_id>>"

jobs:
  lint:
    docker: 
      # This image has poetry, pyenv, pip, pipenv, and python 3.10 pre-installed
      # https://hub.docker.com/r/cimg/python
      - image: cimg/python:3.9.7

    steps:
      - checkout
      # Use the chown command to grant CircleCI access to dependency locations
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "pyproject.toml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run:
          name: Install Tools & Dependencies
          command: |
            
            # Create Environment
            python -m venv capstone
            . capstone/bin/activate
            echo -e "VIRTUAL_ENV=${VIRTUAL_ENV}\n"

            # Check linux operating system of docker container
            cat /etc/os-release

            # install tools
            make setup

            # Install python packages
            make pip-install

            make lint

      - save_cache:
          name: Save python virtualenv
          paths:
            - capstone

          key: v1-dependencies-{{ checksum "pyproject.toml" }}

      #- slack/notify # I need to add a SLACK TOKEN to enable this.
  
  # Making sure unittest pass
  test_code:
    docker: 
      # This image has poetry, pyenv, pip, pipenv, and python 3.10 pre-installed
      # https://hub.docker.com/r/cimg/python
      - image: cimg/python:3.9.7

    steps:
      - checkout
      # Use the chown command to grant CircleCI access to dependency locations
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "pyproject.toml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      # run test
      - run:
          name: run dagster tests
          command: |
            # Your code here.
            # @@@ I would put this in its own job
            echo "implement tests and move to it's own job"
      #- slack/notify # I need to add a SLACK TOKEN to enable this.

  # Build container and make sure browser test passes
  build_and_test_image:
    docker:
      - image: cimg/python:3.9.7

    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "pyproject.toml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
  
  # Upload container to repository
  upload_image:
    docker:
      - image: cimg/python:3.9.7
    steps: 
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "pyproject.toml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
  # End of Continuous Integration, Start of Continuous Delivery

# Workflows
# ----------------------
workflows:
  default:
    jobs:
      - lint

      - test_code
      
      - build_and_test_image:
          requires: [lint, test_code]
          filters:
            branches:
              only: [develop, main]

      # Manually approve before pushing to docker/ecr repository
      #- hold:
      #    type: approval

      - upload_image:
          requires: [build_and_test_image]

      # END OF CONTINUOUS INTEGRATION, START CONTINUOUS DELIVERY
      
      # Want everything in my VPC, so deploying aws infrastructure
      # - deploy_infrastucture:
      #     requires: [upload_image]
      #     filters:
      #       branches:
      #         only: [main]

      # Create EKS cluster (if not already created)
