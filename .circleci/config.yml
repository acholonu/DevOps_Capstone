version: 2.1

# Think of orbs as libraries or packages for CircleCI
orbs:
  slack: circleci/slack@4.4.4
  aws-cli: circleci/aws-cli@2.0.3
  #node: circleci/node@4.7.0

# These are custom functions that I use in other jobs
commands:
  # Function 1
  notify_slack_error:
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1 # build in formating template to display failure
          mentions: "@ugochi" #if you want to target a particular person
          channel: alerts # Slack channel to display to

  # Function 2
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            # Use for roll back
            # Delete any infrastructure created.

            #echo s3://udapeople-<<parameters.workflow_id>>/
            #echo uda-frontend-stack-<<parameters.workflow_id>>
            
            #aws s3 rm --recursive s3://udapeople-<<parameters.workflow_id>>/
            #aws s3 rb s3://udapeople-<<parameters.workflow_id>> --force
            #aws cloudformation delete-stack --stack-name "uda-frontend-stack-<<parameters.workflow_id>>"
            #aws cloudformation delete-stack --stack-name "uda-backend-stack-<<parameters.workflow_id>>"
            #aws cloudformation delete-stack --stack-name uda-prometheus-server-stack

jobs:
  build:
    docker: 
      - image: python:3.10.0-slim
    steps:
      - checkout
      
      - run:
          name: Install Tools
          command: |

            # Check linux operating system
            sudo cat /etc/os-release
            
            apt-get install wget curl

            # installs hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
                      chmod +x /bin/hadolint

            # installs poetry
            curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py | python -
            
            python3 --version
            poetry --version

      - run:
          name: Set Up Environment
          command: |
            python -m venv ~./capstone
            source ~/capstone/bin/activate
            poetry env info

      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "pyproject.toml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: Install Dependencies
          command: |
            make install
      
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "pyproject.toml" }}
  
  lint:
    docker: 
      - image: python:3.10.0-slim
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "pyproject.toml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      
      # run lint!
      - run:
          name: run lint
          command: |
            source ~/capstone/bin/activate
            cd dagster_capstone/dagster_capstone
            make lint

      # run test
      - run:
          name: run dagster tests
          command: |
            # Your code here.
            # @@@ I would put this in its own job
            echo "implement tests and move to it's own job"

    #build_image:

workflows:
  default:
    jobs:
      - build
      - lint:
          requires: [build]