version: 2.1

# Think of orbs as libraries or packages for CircleCI
orbs:
  slack: circleci/slack@4.4.4
  aws-cli: circleci/aws-cli@2.0.3
  aws-eks: circleci/aws-eks@0.2.3
  kubernetes: circleci/kubernetes@0.4.0

# These are custom functions that I use in other jobs
commands:
  # Function 1
  notify_slack_error:
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1 # build in formating template to display failure
          mentions: "@ugochi" #if you want to target a particular person
          channel: alerts # Slack channel to display to

  # Function 2
  destroy-docker-image:
    description: Destroy docker image
    parameters:
      # Add parameter here
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy docker image
          when: on_fail
          command: |
            # Your code here

  # Function 3
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            # Use for roll back
            # Delete any infrastructure created.

            #echo s3://udapeople-<<parameters.workflow_id>>/
            #echo uda-frontend-stack-<<parameters.workflow_id>>
            
            #aws s3 rm --recursive s3://udapeople-<<parameters.workflow_id>>/
            #aws s3 rb s3://udapeople-<<parameters.workflow_id>> --force
            #aws cloudformation delete-stack --stack-name "uda-frontend-stack-<<parameters.workflow_id>>"
            #aws cloudformation delete-stack --stack-name "uda-backend-stack-<<parameters.workflow_id>>"
            #aws cloudformation delete-stack --stack-name uda-prometheus-server-stack

jobs:
  lint:
    docker: 
      # This image has poetry, pyenv, pip, pipenv, and python 3.10 pre-installed
      # https://hub.docker.com/r/cimg/python
      - image: cimg/python:3.9.7-browsers

    steps:
      - checkout
      # Use the chown command to grant CircleCI access to dependency locations
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "pyproject.toml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run:
          name: Install Tools & Dependencies
          command: |
            
            # Create Environment
            python -m venv capstone
            . capstone/bin/activate
            echo -e "VIRTUAL_ENV=${VIRTUAL_ENV}\n"

            # Check linux operating system of docker container
            cat /etc/os-release

            # install tools
            make setup

            # Install python packages
            make pip-install

            make lint

      - save_cache:
          name: Save python virtualenv
          paths:
            - capstone

          key: v1-dependencies-{{ checksum "pyproject.toml" }}
      
      # run test
      - run:
          name: run dagster tests
          command: |
            # Your code here.
            # @@@ I would put this in its own job
            echo "implement tests and move to it's own job"

      #- slack/notify # I need to add a SLACK TOKEN to enable this.

  build:
    docker:
      - image: cimg/python:3.9.7-browsers
    working_directory: dagster_capstone/dagster_capstone
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "pyproject.toml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run:
          name: Run App
          no_output_timeout: 30m
          command: |
            # Activate Environment
            . capstone/bin/activate

            # Run app
            #dagit -d  

      - run:
          name: Smoke Test for FrontEnd
          command: |
            # Your code here

  build_upload_docker_image:
    docker:
      - image: cimg/python:3.9.7

    steps:
      - checkout

  test-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl get services
          name: Test cluster

  create-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: tests/nginx-deployment/deployment.yaml
          resource-name: deployment/nginx-deployment

workflows:
  default:
    jobs:
      - lint
      - build:
          requires: [lint]
      - build_upload_docker_image:
         requires: [build]
      - deploy_infrastucture:
          requires: [build_upload_docker_image]
          filters:
            branches:
              only: [main]
      - aws-eks/create-cluster:
          cluster-name: my-eks-demo
          requires: [deploy_infrastructure]
      - test-cluster:
          cluster-name: my-eks-demo
          requires:
            - aws-eks/create-cluster
      - create-deployment:
          cluster-name: eks-demo-deployment
          requires:
            - aws-eks/create-cluster
      - aws-eks/update-container-image:
          cluster-name: eks-demo-deployment
          container-image-updates: 'nginx=nginx:1.9.1'
          post-steps:
            - kubernetes/delete-resource:
                resource-names: nginx-deployment
                resource-types: deployment
                wait: true
          record: true
          requires:
            - create-deployment
          resource-name: deployment/nginx-deployment
      - aws-eks/delete-cluster:
          cluster-name: my-eks-demo
          requires:
            - test-cluster
      