#A deployment is responsible for keeping a set of pods running
# Reference: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/
# Reference: https://matthewpalmer.net/kubernetes-app-developer/articles/service-kubernetes-example-tutorial.html

apiVersion: v1
kind: Deployment
metadata:
  name: dagster-deployment # Deployment Name
  namespace: production
  labels: 
    app: dagster 
spec:
  restartPolicy: OnFailure
  #serviceAccountName: production-service-account # Don't need this because my repository is public
  selector: # Tells the deployment which pods to manage. Must be labelled as dagster
    matchLabels:
      app: dagster
  replicas: 2 # how many replicas of the pod that should be created

  # Creating the pod with the containers
  template:
    metadata:
      labels: # labels this pod as dagster
        app: dagster
    spec:
      containers:
      # Dagster UI
        - name: dagit-container
          image: $REGISTRY_URL/dagit:latest
          imagePullPolicy: Always
          ports: 
            - containerPort: 3000
            - name: dagit
          # volumeMounts:
          # - name: shared-ebs-data
          #   mountPath: /usr/share/dagster

  #     # Helper Pods
  #       # Dagster Daemon
  #       - name: dagster-daemon-container
  #         image: $REGISTRY_URL/dagster_daemon:latest
  #         imagePullPolicy: Always # Don't use cache, always pull new
  #         volumeMounts:
  #           - name: logs-data
  #             mountPath: /dagster-data
  #             subPath: /logs

  #       # Postgres System database
  #       - name: postgres-container
  #         image: postgres:14.1
  #         imagePullPolicy: Always
  #         ports: 
  #           - containerPort: 5432
  #           - name: postgres
  #         volumeMounts:
  #           - name: share-ebs-volume
  #             mountPath: /postgres_data
  #         env: 
  #           - name: POSTGRES_PASSWORD
  #             value: $POSTGRES_PASSWORD
  #           - name: POSTGRES_DB
  #             value: $POSTGRES_DB
  #           - name: POSTGRES_USER
  #             value: $POSTGRES_USER
  #           - name: POSTGRES_HOSTNAME
  #             value: $POSTGRES_HOSTNAME
  # volumes:
  #   - name: logs-data
  #     emptyDir: {}
  #   - name: share-ebs-volume
  #     # This AWS EBS volume must already exist.
  #     awsElasticBlockStore:
  #       volumeID: "<volume id>"
  #       fsType: ext4